<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80"#>
<#@ assembly name="System.Core"#>
<#@ assembly name="$(SolutionDir)RP.Util.EnvDte\bin\Debug\RP.Util.EnvDte.dll"#>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="RP.Util.EnvDte" #>

<#@ import namespace="System.Collections.Generic" #>

<#
	var hostServiceProvider = (IServiceProvider)Host;
	Dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
	if(Dte == null) {
				throw new Exception("T4Generator can only execute through the Visual Studio host");

}#>

<#+
Project GetProjectContainingT4File(DTE dte,bool keepDirty) {

    // Find the .tt file's ProjectItem
    ProjectItem projectItem = dte.Solution.FindProjectItem(Host.TemplateFile);

    // If the .tt file is not opened, open it
    if (projectItem.Document == null)
        projectItem.Open(Constants.vsViewKindCode);

    if (keepDirty) {
        // Mark the .tt file as unsaved. This way it will be saved and update itself next time the
        // project is built. Basically, it keeps marking itself as unsaved to make the next build work.
        // Note: this is certainly hacky, but is the best I could come up with so far.
        projectItem.Document.Saved = false;
    }

    return projectItem.ContainingProject;
}

#>
<#+ 

	IEnumerable<T> Descendants<T>(IEnumerable<T> source,Func<T, IEnumerable<T>> descendBy)
	{
		foreach(T value in source)
		{
			yield return value;
			foreach(T child in Descendants(descendBy(value),descendBy))
			{
				yield return child;
			}
		}
	}
	IEnumerable<CodeInterface> FindCodeModelInterfaces(IEnumerable<CodeElement> ces){
		foreach(var ce in ces)
		switch(ce.Kind)
		{
			case EnvDTE.vsCMElement.vsCMElementInterface:
					yield return (CodeInterface)ce;
				break;
			case EnvDTE.vsCMElement.vsCMElementNamespace:
				foreach(var elem in FindCodeModelInterfaces((ce as CodeNamespace).Members.Cast<CodeElement>()))
					yield return elem;
				break;
		}
	}
	IEnumerable<CodeProperty> FindCodeModelImplementedInterfaceProperties(CodeInterface ci){
		if(ci.Bases==null)
			yield break;
		foreach(var ii in ci.Bases.Cast<CodeInterface>()){
			foreach(var ip in FindCodeModelProperties(ii))
				yield return ip;
			foreach(var iip in FindCodeModelImplementedInterfaceProperties(ii))
				yield return iip;
        }
    }
    IEnumerable<CodeProperty> FindCodeModelProperties(CodeInterface ci){
	   foreach(var cp in ci.Members.Cast<CodeElement>().OfType<CodeProperty>()){
	       yield return cp;
	   }
    }
	IEnumerable<ProjectItem> RecurseSolutionItems(DTE dte)
	{
		using(var helper = new EnvDteHelper((IServiceProvider)Host))
		{
		return helper.GetProjectItems();
		}
	}
    IEnumerable<ProjectItem> RecurseProjectItems(DTE dte,  Project proj)
    {
		using(var helper = new EnvDteHelper((IServiceProvider)Host))
		{
	   return helper.GetProjectItems(proj);
	   }
    }
    IEnumerable<Project> RecurseSolutionProjects(DTE dte)
	{
	using(var helper = new EnvDteHelper((IServiceProvider)Host))
		{
	   	return helper.Projects;
		}
    }
    IEnumerable<Project> GetSolutionFolderProjects(DTE dte, Project solutionFolder)
    {
		using(var helper = new EnvDteHelper((IServiceProvider)Host))
		{
		return helper.GetSolutionFolderProjects(solutionFolder);
		}
    }
	string SolutionName(DTE dte)
	{
		using(var helper = new EnvDteHelper((IServiceProvider)Host))
		{
			return helper.SolutionName;
		}
	}
#>